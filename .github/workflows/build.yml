# Workflow name
name: Build Android APK

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Sets up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Installs Python dependencies (Buildozer)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install buildozer

      # Installs Cython (often required by Kivy recipes)
      - name: Install Cython
        run: |
          pip install cython

      # Install cmdline-tools, accept licenses, and copy them for Buildozer
      - name: Install Command-line Tools & Accept/Copy Licenses
        run: |
          # Download command-line tools (Example URL - may need updating)
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
          # Create directory structure for manual SDK tools
          mkdir -p $HOME/android-sdk/cmdline-tools
          unzip cmdline-tools.zip -d $HOME/android-sdk/cmdline-tools
          mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
          # Add the tools bin directory to the PATH for this step
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          # Set ANDROID_HOME/SDK_ROOT for the sdkmanager command
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          # Accept all licenses non-interactively
          echo "Accepting licenses for manual SDK..."
          yes | sdkmanager --licenses --sdk_root=$ANDROID_HOME || echo "Manual sdkmanager licenses failed"
          # *** ADDED: Create Buildozer's expected license dir and copy accepted licenses ***
          echo "Copying accepted licenses for Buildozer..."
          mkdir -p /home/runner/.buildozer/android/platform/android-sdk/licenses/
          cp $ANDROID_HOME/licenses/* /home/runner/.buildozer/android/platform/android-sdk/licenses/ || echo "Failed to copy licenses"


      # Creates and configures the buildozer.spec file
      - name: Create buildozer.spec
        run: |
          buildozer init
          sed -i 's/requirements =/requirements = python3,kivy,pyttsx3,speechrecognition/' buildozer.spec
          sed -i 's/android.api = 31/android.api = 34/' buildozer.spec
          sed -i 's/android.minapi = 21/android.minapi = 21/' buildozer.spec
          # REMOVED android.sdk_path and android.ndk_path
          sed -i 's/#android.permissions =/android.permissions = RECORD_AUDIO/' buildozer.spec
          # *** CHANGED: Try pinning to build tools 33.0.2 ***
          sed -i 's/#android.build_tools_version =/android.build_tools_version = 33.0.2/' buildozer.spec
          # Set NDK version for Buildozer to download
          sed -i 's/#android.ndk = 25b/android.ndk = 25b/' buildozer.spec

      # Builds the Android APK - Buildozer should now download and manage its own SDK/NDK
      - name: Build APK
        run: |
          buildozer -v android debug # Add -v for verbose buildozer logs

      # Uploads the generated APK as an artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Helper-APK
          path: bin/*.apk
